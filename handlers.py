# handlers.py

import logging
import os
import asyncio
import html
import json
from datetime import datetime
import zipfile

import aiofiles
from aiogram import types, Dispatcher, Bot
from aiogram.types import ParseMode, InputFile, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import Unauthorized, CantParseEntities
from aiogram.dispatcher import FSMContext

from config import (
    AUTHORIZED_USERS_FILE,
    BANNED_USERS_FILE,
    KEYS_ISSUED_FILE,
    KEYS_LOG_FILE,
    SUPPORT_REQUESTS_FILE,
    SITE_EXCEPTIONS_FILE,
    CONFIGS_DIR,
    AUTHORIZED_USER_ID,
    ADMIN_USERNAME,
    USER_LIMITS_FILE,
    KEY_LIMIT_FILE
)

from keyboards import (
    get_main_menu_kb,
    access_request_kb,
    create_authorize_kb,
    get_back_kb,
    get_users_keyboard,
    get_user_actions_keyboard,
    get_stats_user_actions_keyboard
)

from states import (
    WishesStates,
    VPNSupportStates,
    AddSiteForm,
    BroadcastForm,
    UploadKeysForm,
    ManageUserForm,
    SupportReplyStates,
    GlobalSettingsForm
)

from utils import (
    read_file,
    append_to_file,
    remove_from_file,
    log_key_issuance,
    check_key_issued,
    mark_key_issued,
    get_conf_files,
    update_user_stats,
    load_user_stats,
    add_site_exceptions,
    extract_conf_files_from_zip,
    write_file,
    get_user_limit,
    set_user_limit,
    get_global_limit,
    set_global_limit,
    get_user_keys_count
)

logger = logging.getLogger(__name__)

bot = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ main.py —á–µ—Ä–µ–∑ set_bot_instance

def set_bot_instance(new_bot: Bot):
    global bot
    bot = new_bot

def load_messages(filepath='messages.json'):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return {}

MESSAGES = load_messages()

def format_user_display(user_obj, user_id, keys_count):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ø–∏—Å–∫–∞.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: username -> –µ—Å–ª–∏ –µ—Å—Ç—å, @username (–∂–∏—Ä–Ω—ã–π) + ID + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
    –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–º—è –§–∞–º–∏–ª–∏—è (–∏–ª–∏ "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"), + ID + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
    """
    first_name = user_obj.first_name or ""
    last_name = user_obj.last_name or ""
    full_name = (first_name + " " + last_name).strip()
    if user_obj.username:
        # @username
        return f"<b>@{html.escape(user_obj.username)}</b> (ID: {user_id}) {keys_count} –∫–ª—é—á–µ–π"
    else:
        # –ò–º–µ–Ω–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
        if full_name:
            return f"{html.escape(full_name)} (ID: {user_id}) {keys_count} –∫–ª—é—á–µ–π"
        else:
            return f"–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ (ID: {user_id}) {keys_count} –∫–ª—é—á–µ–π"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_id}")
    banned_users = await read_file(BANNED_USERS_FILE)
    if str(user_id) in banned_users:
        await message.reply(MESSAGES.get("get_key_banned", "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã."), parse_mode=ParseMode.HTML)
        return

    authorized_users = await read_file(AUTHORIZED_USERS_FILE)
    if str(user_id) not in authorized_users and user_id != AUTHORIZED_USER_ID:
        await message.reply(MESSAGES.get("access_request", "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."), reply_markup=access_request_kb(), parse_mode=ParseMode.HTML)
        return

    main_menu_kb = get_main_menu_kb(user_id)
    text = MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    await message.reply(text, reply_markup=main_menu_kb, parse_mode=ParseMode.HTML)

async def handle_access_request(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    try:
        username = call.from_user.username or f"{call.from_user.first_name} {call.from_user.last_name}"
        user_display = username if call.from_user.username else f"{call.from_user.first_name} {call.from_user.last_name}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "‚úÖ –î–∞" –∏ "‚ùå –ù–µ—Ç"
        keyboard = create_authorize_kb(user_id)
        message_text = (
            f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href='tg://user?id={user_id}'>{html.escape(user_display)}</a> (ID: {user_id}).\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø?"
        )
        await bot.send_message(
            AUTHORIZED_USER_ID,
            message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        await call.answer(MESSAGES.get("access_request_sent", "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"), show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await call.answer(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."), show_alert=True)

async def handle_authorization_response(call: types.CallbackQuery, state: FSMContext):
    admin_id = call.from_user.id
    if admin_id != AUTHORIZED_USER_ID:
        await call.answer(MESSAGES.get("access_denied", "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"), show_alert=True)
        return

    try:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: "authorize_yes_{user_id}" –∏–ª–∏ "authorize_no_{user_id}"
        parts = call.data.split("_")
        if len(parts) != 3:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        # parts: ['authorize', 'yes/no', 'user_id']
        response = parts[1]  # 'yes' –∏–ª–∏ 'no'
        user_id = int(parts[2])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await call.answer(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."), show_alert=True)
        return

    try:
        user = await bot.get_chat(user_id)
        keys_count = await get_user_keys_count(user_id)
        user_display = format_user_display(user, user_id, keys_count)

        if response == "yes":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            authorized_users = await read_file(AUTHORIZED_USERS_FILE)
            if str(user_id) not in authorized_users:
                await append_to_file(AUTHORIZED_USERS_FILE, str(user_id))
            message_text = f"‚úÖ {user_display}: –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
            await call.message.edit_text(message_text, parse_mode=ParseMode.HTML)
            await bot.send_message(
                user_id,
                MESSAGES.get("access_granted", "üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."),
                reply_markup=get_main_menu_kb(user_id),
                parse_mode=ParseMode.HTML
            )
        elif response == "no":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω
            banned_users = await read_file(BANNED_USERS_FILE)
            if str(user_id) not in banned_users:
                await append_to_file(BANNED_USERS_FILE, str(user_id))
            message_text = f"‚ùå {user_display}: –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω"
            await call.message.edit_text(message_text, parse_mode=ParseMode.HTML)
            await bot.send_message(
                user_id,
                MESSAGES.get("access_denied_user", "üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."),
                reply_markup=ReplyKeyboardRemove(),
                parse_mode=ParseMode.HTML
            )
        else:
            logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
            await call.answer(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."), show_alert=True)
            return

        await call.answer()  # –£–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–Ω–æ–ø–∫–∏
    except Unauthorized:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await call.answer(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."), show_alert=True)

async def process_wishes(message: types.Message, state: FSMContext):
    await WishesStates.waiting_for_text.set()
    await message.reply(MESSAGES.get("wishes_prompt", "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:"), reply_markup=get_back_kb(), parse_mode=ParseMode.HTML)

async def process_wishes_text(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == "üîô –Ω–∞–∑–∞–¥":
        await state.finish()
        user_id = message.from_user.id
        await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id))
        return

    user_text = message.text.strip()
    admin_id = AUTHORIZED_USER_ID
    escaped_text = html.escape(user_text)
    try:
        await bot.send_message(
            admin_id,
            f"üìù <b>–ü–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç <a href='tg://user?id={message.from_user.id}'>{html.escape(message.from_user.full_name)}</a> (ID: {message.from_user.id}):</b>\n{escaped_text}",
            parse_mode=ParseMode.HTML
        )
    except CantParseEntities:
        await bot.send_message(
            admin_id,
            f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id}):\n{user_text}"
        )

    await message.reply(MESSAGES.get("wishes_thanks", "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ!"), parse_mode=ParseMode.HTML)
    user_id = message.from_user.id
    await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id))
    await state.finish()

async def process_vpn_issue(message: types.Message, state: FSMContext):
    await VPNSupportStates.waiting_for_operator.set()
    await message.reply(MESSAGES.get("vpn_issue_prompt_operator", "üìû –£–∫–∞–∂–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–≤—è–∑–∏:"), reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)

async def process_operator(message: types.Message, state: FSMContext):
    operator = message.text.strip()
    await state.update_data(operator=operator)
    await VPNSupportStates.next()
    await message.reply(MESSAGES.get("vpn_issue_prompt_description", "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"), reply_markup=get_back_kb(), parse_mode=ParseMode.HTML)

async def process_description(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == "üîô –Ω–∞–∑–∞–¥":
        await state.finish()
        user_id = message.from_user.id
        await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id))
        return

    description = message.text.strip()
    user_id = message.from_user.id
    timestamp = datetime.now().astimezone().strftime("%Y-%m-%d %H:%M:%S %z")
    operator = (await state.get_data()).get('operator', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    admin_id = AUTHORIZED_USER_ID

    try:
        user = await bot.get_chat(user_id)
        username = user.username if user.username else f"{user.first_name} {user.last_name}"
        message_text = (
            f"üÜò <b>–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É VPN</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{html.escape(username)}</a> (ID: {user_id})\n"
            f"–í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {html.escape(timestamp)}\n"
            f"–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∑–∏: {html.escape(operator)}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n{html.escape(description)}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å", –≤–∫–ª—é—á–∞—é—â–µ–π user_id –∏ user_message_id
        reply_button = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}_{message.message_id}")
        reply_kb = InlineKeyboardMarkup().add(reply_button)

        await bot.send_message(
            admin_id,
            message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_kb
        )
        await message.reply(MESSAGES.get("vpn_issue_submitted", "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."), reply_markup=get_main_menu_kb(user_id), parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è VPN –∞–¥–º–∏–Ω—É: {e}")
        await message.reply(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."), reply_markup=get_main_menu_kb(user_id))

    await state.finish()

async def handle_reply_button(call: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∞–¥–º–∏–Ω –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏ –≤–≤–µ–¥–µ—Ç —Ç–µ–∫—Å—Ç.
    """
    admin_id = call.from_user.id
    if admin_id != AUTHORIZED_USER_ID:
        await call.answer(MESSAGES.get("access_denied", "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"), show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ user_message_id –∏–∑ callback_data
    try:
        _, user_id_str, user_message_id_str = call.data.split("_")
        user_id = int(user_id_str)
        user_message_id = int(user_message_id_str)
    except ValueError:
        await call.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –∏ user_message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    await state.update_data(selected_user_id=user_id, selected_user_message_id=user_message_id)
    await SupportReplyStates.waiting_for_reply.set()

    await call.message.reply(MESSAGES.get("reply_prompt", "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:"), reply_markup=get_back_kb(), parse_mode=ParseMode.HTML)
    await call.answer()

async def process_support_reply(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == "üîô –Ω–∞–∑–∞–¥":
        await state.finish()
        user_id = message.from_user.id
        await message.reply(MESSAGES.get("reply_cancelled", "üîô –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."), reply_markup=get_main_menu_kb(user_id))
        return

    reply_text = message.text.strip()
    data = await state.get_data()
    user_id = data.get('selected_user_id')
    user_message_id = data.get('selected_user_message_id')

    if not user_id or not user_message_id:
        await message.reply(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."), reply_markup=get_main_menu_kb(message.from_user.id))
        await state.finish()
        return

    try:
        await bot.send_message(
            user_id,
            f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{html.escape(reply_text)}",
            parse_mode=ParseMode.HTML
        )
        await message.reply(MESSAGES.get("reply_success", "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."), reply_markup=get_main_menu_kb(message.from_user.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.reply(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."), reply_markup=get_main_menu_kb(message.from_user.id))

    await state.finish()

async def cmd_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.reply(MESSAGES.get("access_denied", "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."), parse_mode=ParseMode.HTML)
        return
    await BroadcastForm.message_text.set()
    await message.reply(MESSAGES.get("broadcast_prompt", "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"), reply_markup=get_back_kb(), parse_mode=ParseMode.HTML)

async def process_broadcast_message(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == "üîô –Ω–∞–∑–∞–¥":
        await state.finish()
        user_id = message.from_user.id
        await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id))
        return

    broadcast_message = message.text.strip()
    authorized_users = await read_file(AUTHORIZED_USERS_FILE)
    authorized_users = [int(uid) for uid in authorized_users if uid.isdigit()]
    if AUTHORIZED_USER_ID not in authorized_users:
        authorized_users.append(AUTHORIZED_USER_ID)

    count = 0
    for uid in authorized_users:
        try:
            await bot.send_message(uid, broadcast_message, parse_mode=ParseMode.HTML)
            count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    await message.reply(MESSAGES.get("broadcast_sent", "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.").format(count=count), reply_markup=get_main_menu_kb(message.from_user.id))
    await state.finish()

async def cmd_upload_keys(message: types.Message, state: FSMContext):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.reply(MESSAGES.get("access_denied", "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."), parse_mode=ParseMode.HTML)
        return
    await UploadKeysForm.uploading.set()
    await message.reply(MESSAGES.get("upload_keys_prompt", "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ .zip —Å .conf —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:"), reply_markup=get_back_kb())

MAX_ZIP_SIZE = 10 * 1024 * 1024  # 10 MB
MAX_CONF_FILES = 1220

async def process_upload_keys(message: types.Message, state: FSMContext):
    if message.text and message.text.strip().lower() == "üîô –Ω–∞–∑–∞–¥":
        await state.finish()
        user_id = message.from_user.id
        await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id))
        return

    if message.document:
        doc = message.document
        if not doc.file_name.endswith('.zip'):
            await message.reply(f"‚ùå –§–∞–π–ª `{doc.file_name}` –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.", reply_markup=get_back_kb())
            return

        if doc.file_size > MAX_ZIP_SIZE:
            await message.reply(f"‚ùå –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç (10 MB).", reply_markup=get_back_kb())
            return

        try:
            temp_zip_path = os.path.join(CONFIGS_DIR, f"temp_{doc.file_id}.zip")
            await doc.download(destination_file=temp_zip_path)

            added, replaced = await extract_conf_files_from_zip(temp_zip_path)
            os.remove(temp_zip_path)

            if added == -1 and replaced == -1:
                await message.reply(MESSAGES.get("upload_keys_error", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."), reply_markup=get_back_kb())
                return

            if added + replaced > MAX_CONF_FILES:
                await message.reply(f"‚ùå –í –∞—Ä—Ö–∏–≤–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ `.conf` —Ñ–∞–π–ª–æ–≤.", reply_markup=get_back_kb())
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for f in os.listdir(CONFIGS_DIR):
                    if f.startswith("temp_"):
                        os.remove(os.path.join(CONFIGS_DIR, f))
                return

            response_message = MESSAGES.get("upload_keys_success", "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {added} —Ñ–∞–π–ª–æ–≤ `.conf`.\n‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ {replaced} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤.").format(added=added, replaced=replaced)
            await message.reply(response_message, reply_markup=get_main_menu_kb(message.from_user.id))
            await update_user_stats(message.from_user.id)
        except zipfile.BadZipFile:
            await message.reply(MESSAGES.get("upload_keys_error", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.").format(error="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤"), reply_markup=get_back_kb())
        except Exception as e:
            await message.reply(MESSAGES.get("upload_keys_error", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.").format(error=str(e)), reply_markup=get_back_kb())
    else:
        await message.reply(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."), reply_markup=get_back_kb())

async def cmd_get_key(message: types.Message):
    user_id = message.from_user.id
    banned_users = await read_file(BANNED_USERS_FILE)
    if str(user_id) in banned_users:
        await message.reply(MESSAGES.get("get_key_banned", "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞."), parse_mode=ParseMode.HTML)
        return

    authorized_users = await read_file(AUTHORIZED_USERS_FILE)
    if str(user_id) not in authorized_users and user_id != AUTHORIZED_USER_ID:
        await message.reply(MESSAGES.get("get_key_not_authorized", "üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞."), parse_mode=ParseMode.HTML)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–ª—é—á–µ–π
    user_limit = await get_user_limit(user_id)
    issued_keys = await read_file(KEYS_ISSUED_FILE)
    user_keys = [line for line in issued_keys if line.startswith(f"{user_id}:")]
    if len(user_keys) >= user_limit and user_id != AUTHORIZED_USER_ID:
        await message.reply(MESSAGES.get("get_key_limit_reached", "üîí –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∫–ª—é—á–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞."), parse_mode=ParseMode.HTML)
        return

    conf_files = await get_conf_files()
    if not conf_files:
        await message.reply("‚ùå –í—Å–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return

    next_file = conf_files[0]
    file_path = os.path.join(CONFIGS_DIR, next_file)

    try:
        first_key = not any(line.startswith(f"{user_id}:") for line in issued_keys)
        instruction_message = ""
        if first_key:
            instruction_message = (
                "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN:</b>\n"
                "- –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–ª–∏ AmneziaWG\n"
                "- –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á</b> –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª `.conf` –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–ª–∏ AmneziaVPN\n"
            )

        if not os.path.exists(file_path):
            await message.reply("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

        if first_key:
            await message.reply_document(
                InputFile(file_path),
                caption=instruction_message,
                parse_mode=ParseMode.HTML
            )
        else:
            await message.reply_document(InputFile(file_path))

        try:
            user = await bot.get_chat(user_id)
            username = user.username if user.username else f"{user.first_name} {user.last_name}"
        except:
            username = f"ID: {user_id}"

        await log_key_issuance(user_id, username, next_file)
        await mark_key_issued(user_id, next_file)
        await update_user_stats(user_id)

        os.remove(file_path)

        confirmation_message = MESSAGES.get("get_key_sent", "üîë –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\nüëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        if first_key:
            confirmation_message = MESSAGES.get("get_key_sent_first", "üîë –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\nüìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å –∫–ª—é—á–æ–º.\n\nüëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await message.reply(f"{confirmation_message}", reply_markup=get_main_menu_kb(user_id), parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {next_file}: {e}")
        await message.reply(MESSAGES.get("error_generic", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."))

async def cmd_add_site(message: types.Message, state: FSMContext):
    await AddSiteForm.site_url.set()
    await message.reply(MESSAGES.get("add_site_prompt", "üåê –í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:"), reply_markup=get_back_kb(), parse_mode=ParseMode.HTML)

async def process_site_url(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == "üîô –Ω–∞–∑–∞–¥":
        await state.finish()
        user_id = message.from_user.id
        await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id))
        return

    url = message.text.strip()
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL", reply_markup=get_back_kb())
        return

    await state.update_data(site_url=url)
    await AddSiteForm.next()
    await message.reply(MESSAGES.get("add_site_processing", "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."), reply_markup=get_back_kb(), parse_mode=ParseMode.HTML)

    added_patterns, all_patterns = await add_site_exceptions(url)
    if not added_patterns:
        await message.reply(MESSAGES.get("add_site_already_exists", "‚úÖ –°–∞–π—Ç—ã —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ."), parse_mode=ParseMode.HTML)
        user_id = message.from_user.id
        await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id), parse_mode=ParseMode.HTML)
        await state.finish()
        return

    await message.reply(MESSAGES.get("add_site_success", "‚úÖ –°–∞–π—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ Docker –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å."), reply_markup=get_main_menu_kb(message.from_user.id), parse_mode=ParseMode.HTML)
    await state.finish()

async def cmd_users(message: types.Message, state: FSMContext):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.reply(MESSAGES.get("access_denied", "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."), parse_mode=ParseMode.HTML)
        return

    authorized_users = await read_file(AUTHORIZED_USERS_FILE)
    banned_users = await read_file(BANNED_USERS_FILE)

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_list = []
    # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    for uid_str in authorized_users:
        if not uid_str.isdigit():
            continue
        uid = int(uid_str)
        try:
            user_obj = await bot.get_chat(uid)
            keys_count = await get_user_keys_count(uid)
            user_display = user_obj.username if user_obj.username else f"{user_obj.first_name or ''} {user_obj.last_name or ''}".strip() or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            user_list.append((user_display, uid))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {uid}: {e}")
            user_list.append(("–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ", uid))

    # –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    for uid_str in banned_users:
        if not uid_str.isdigit():
            continue
        uid = int(uid_str)
        try:
            user_obj = await bot.get_chat(uid)
            keys_count = await get_user_keys_count(uid)
            user_display = user_obj.username if user_obj.username else f"{user_obj.first_name or ''} {user_obj.last_name or ''}".strip() or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            user_list.append((user_display, uid))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {uid}: {e}")
            user_list.append(("–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ", uid))

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    text = "üë• **–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    authorized_users_display = []
    for user_display, uid in user_list:
        if uid in map(int, authorized_users):
            keys_count = await get_user_keys_count(uid)
            authorized_users_display.append(f"{user_display} (ID: {uid}) - {keys_count} –∫–ª—é—á–µ–π")
    if authorized_users_display:
        text += "\n".join(authorized_users_display)
    else:
        text += "–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    text += "\n\nüö´ **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    banned_users_display = []
    for user_display, uid in user_list:
        if uid in map(int, banned_users):
            keys_count = await get_user_keys_count(uid)
            banned_users_display.append(f"{user_display} (ID: {uid}) - {keys_count} –∫–ª—é—á–µ–π")
    if banned_users_display:
        text += "\n".join(banned_users_display)
    else:
        text += "–ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_keyboard = get_users_keyboard(user_list)

    await message.reply(text, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True, reply_markup=users_keyboard)

async def handle_user_selection(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏.
    """
    text = message.text
    try:
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "–ò–º—è (ID: 12345) - X –∫–ª—é—á–µ–π"
        start = text.rfind("(ID: ")
        end = text.find(")", start)
        if start == -1 or end == -1:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏")
        user_id_str = text[start+5:end]
        user_id = int(user_id_str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ '{text}': {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_back_kb())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_user_id=user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    banned_users = await read_file(BANNED_USERS_FILE)
    is_banned = str(user_id) in banned_users

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    actions_keyboard = get_user_actions_keyboard(is_banned)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    try:
        user_obj = await bot.get_chat(user_id)
        user_display = user_obj.username if user_obj.username else f"{user_obj.first_name or ''} {user_obj.last_name or ''}".strip() or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        user_display = "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    action_text = f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:**\n{html.escape(user_display)} (ID: {user_id})"

    await message.reply(action_text, parse_mode=ParseMode.MARKDOWN, reply_markup=actions_keyboard)

async def handle_user_action(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    action = message.text.strip()
    data = await state.get_data()
    user_id = data.get('selected_user_id')

    if not user_id:
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", reply_markup=get_back_kb())
        return

    if action == "üîô –ù–∞–∑–∞–¥":
        await state.finish()
        user_id = message.from_user.id
        await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id))
        return

    if action == "–ó–∞–±–∞–Ω–∏—Ç—å":
        authorized_users = await read_file(AUTHORIZED_USERS_FILE)
        if str(user_id) not in authorized_users:
            await append_to_file(BANNED_USERS_FILE, str(user_id))
            await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=get_user_actions_keyboard(True))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")
        else:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=get_back_kb())
    elif action == "–†–∞–∑–±–∞–Ω–∏—Ç—å":
        await remove_from_file(BANNED_USERS_FILE, str(user_id))
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.", reply_markup=get_user_actions_keyboard(False))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω")
    elif action == "–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–π –ª–∏–º–∏—Ç –∫–ª—é—á–µ–π":
        await ManageUserForm.set_limit.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∫–ª—é—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_back_kb())
    else:
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=get_back_kb())

async def set_user_limit_value(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if message.text.strip().lower() == "üîô –Ω–∞–∑–∞–¥":
        await state.finish()
        user_id = (await state.get_data()).get('selected_user_id')
        is_banned = str(user_id) in await read_file(BANNED_USERS_FILE)
        await message.reply("üîô –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_user_actions_keyboard(is_banned))
        return

    try:
        new_limit = int(message.text.strip())
        if new_limit <= 0:
            raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError as e:
        await message.reply(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: {e}", reply_markup=get_back_kb())
        return

    data = await state.get_data()
    user_id = data.get('selected_user_id')

    if not user_id:
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", reply_markup=get_back_kb())
        return

    await set_user_limit(user_id, new_limit)
    await message.reply(f"‚úÖ –õ–∏–º–∏—Ç –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_limit}.", reply_markup=get_user_actions_keyboard(str(user_id) in await read_file(BANNED_USERS_FILE)))

    logger.info(f"–õ–∏–º–∏—Ç –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_limit}")
    await state.finish()

async def cmd_stats(message: types.Message, state: FSMContext):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.reply(MESSAGES.get("access_denied", "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."), parse_mode=ParseMode.HTML)
        return

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª—é—á–µ–π
    conf_files = await get_conf_files()
    remain = len(conf_files)

    authorized_users = await read_file(AUTHORIZED_USERS_FILE)
    banned_users = await read_file(BANNED_USERS_FILE)

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_list = []
    # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    for uid_str in authorized_users:
        if not uid_str.isdigit():
            continue
        uid = int(uid_str)
        try:
            user_obj = await bot.get_chat(uid)
            keys_count = await get_user_keys_count(uid)
            user_display = user_obj.username if user_obj.username else f"{user_obj.first_name or ''} {user_obj.last_name or ''}".strip() or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            user_list.append((user_display, uid))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {uid}: {e}")
            user_list.append(("–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ", uid))

    # –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    for uid_str in banned_users:
        if not uid_str.isdigit():
            continue
        uid = int(uid_str)
        try:
            user_obj = await bot.get_chat(uid)
            keys_count = await get_user_keys_count(uid)
            user_display = user_obj.username if user_obj.username else f"{user_obj.first_name or ''} {user_obj.last_name or ''}".strip() or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            user_list.append((user_display, uid))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {uid}: {e}")
            user_list.append(("–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ", uid))

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n**–û—Å—Ç–∞–ª–æ—Å—å –∫–ª—é—á–µ–π:** {remain}\n\n**–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    authorized_users_display = []
    for user_display, uid in user_list:
        if uid in map(int, authorized_users):
            keys_count = await get_user_keys_count(uid)
            authorized_users_display.append(f"{user_display} (ID: {uid}) - {keys_count} –∫–ª—é—á–µ–π")
    if authorized_users_display:
        text += "\n".join(authorized_users_display)
    else:
        text += "–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    text += "\n\nüö´ **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    banned_users_display = []
    for user_display, uid in user_list:
        if uid in map(int, banned_users):
            keys_count = await get_user_keys_count(uid)
            banned_users_display.append(f"{user_display} (ID: {uid}) - {keys_count} –∫–ª—é—á–µ–π")
    if banned_users_display:
        text += "\n".join(banned_users_display)
    else:
        text += "–ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats_keyboard = get_users_keyboard(user_list)

    await message.reply(text, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True, reply_markup=stats_keyboard)

async def handle_stats_user_selection(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    text = message.text
    try:
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "–ò–º—è (ID: 12345) - X –∫–ª—é—á–µ–π"
        start = text.rfind("(ID: ")
        end = text.find(")", start)
        if start == -1 or end == -1:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏")
        user_id_str = text[start+5:end]
        user_id = int(user_id_str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ '{text}': {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_back_kb())
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    issued_keys = await read_file(KEYS_LOG_FILE)
    user_files = []
    for line in issued_keys:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç:
        # timestamp - User: username (ID: user_id) - Key: filename.conf
        if f"(ID: {user_id})" in line and "Key:" in line:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º filename.conf
            parts = line.strip().split(" - ")
            if len(parts) >= 3:
                key_part = parts[2]
                key_filename = key_part.replace("Key: ", "")
                user_files.append(key_filename)

    if user_files:
        keys_text = f"üìÑ **–ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):**\n" + "\n".join(user_files)
    else:
        keys_text = f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}) –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π."

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "üîô –ù–∞–∑–∞–¥"
    kb = get_stats_user_actions_keyboard()

    await message.reply(keys_text, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True, reply_markup=kb)

async def handle_stats_back(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
    """
    await state.finish()
    user_id = message.from_user.id
    await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id))

async def handle_user_action_in_stats(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥".
    """
    action = message.text.strip()
    if action == "üîô –ù–∞–∑–∞–¥":
        await state.finish()
        user_id = message.from_user.id
        await message.reply("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_kb(user_id))
        return
    else:
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=get_back_kb())

async def handle_back(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥".
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.finish()
    user_id = message.from_user.id
    await message.reply(MESSAGES.get("welcome", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"), reply_markup=get_main_menu_kb(user_id), parse_mode=ParseMode.HTML)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

def register_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(cmd_start, commands=['start'])

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞
    dp.register_callback_query_handler(handle_access_request, lambda c: c.data == 'request_access', state='*')
    dp.register_callback_query_handler(handle_authorization_response, lambda c: c.data.startswith('authorize_'), state='*')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    dp.register_message_handler(handle_user_selection, lambda m: "(ID: " in m.text, state='*')  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    dp.register_message_handler(handle_stats_user_selection, lambda m: "(ID: " in m.text, state='*')  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    dp.register_message_handler(handle_user_action, lambda m: m.text in ["–ó–∞–±–∞–Ω–∏—Ç—å", "–†–∞–∑–±–∞–Ω–∏—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–π –ª–∏–º–∏—Ç –∫–ª—é—á–µ–π", "üîô –ù–∞–∑–∞–¥"], state='*')
    dp.register_message_handler(set_user_limit_value, state=ManageUserForm.set_limit, content_types=types.ContentTypes.TEXT)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    dp.register_message_handler(cmd_stats, lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.register_message_handler(handle_stats_back, lambda m: m.text == "üîô –ù–∞–∑–∞–¥", state='*')
    dp.register_message_handler(handle_user_action_in_stats, lambda m: m.text == "üîô –ù–∞–∑–∞–¥", state='*')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(process_wishes, lambda m: m.text == "üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", state='*')
    dp.register_message_handler(process_wishes_text, state=WishesStates.waiting_for_text, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(cmd_get_key, lambda m: m.text == "üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á")
    dp.register_message_handler(cmd_add_site, lambda m: m.text == "üåê –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
    dp.register_message_handler(process_site_url, state=AddSiteForm.site_url)
    dp.register_message_handler(process_vpn_issue, lambda m: m.text == "üõ† –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN")

    dp.register_message_handler(cmd_broadcast, lambda m: m.text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º")
    dp.register_message_handler(process_broadcast_message, state=BroadcastForm.message_text)
    dp.register_message_handler(cmd_upload_keys, lambda m: m.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–∏")
    dp.register_message_handler(process_upload_keys, content_types=types.ContentType.DOCUMENT, state=UploadKeysForm.uploading)
    dp.register_message_handler(cmd_users, lambda m: m.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    dp.register_message_handler(process_support_reply, state=SupportReplyStates.waiting_for_reply, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(process_operator, state=VPNSupportStates.waiting_for_operator, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(process_description, state=VPNSupportStates.waiting_for_description, content_types=types.ContentTypes.TEXT)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
    dp.register_message_handler(handle_back, lambda m: m.text.strip().lower() == "üîô –Ω–∞–∑–∞–¥", state='*')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    dp.register_callback_query_handler(handle_reply_button, lambda c: c.data and c.data.startswith("reply_"), state='*')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    dp.register_callback_query_handler(lambda c: c.answer(), lambda c: c.data == "no_action")