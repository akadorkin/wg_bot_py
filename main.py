# main.py

import logging
import os
import aiofiles  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
from aiogram import Bot, Dispatcher
from aiogram.types import ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import (
    API_TOKEN,
    AUTHORIZED_USER_ID,
    CONFIGS_DIR,
    USERS_DIR,
    DATA_DIR,
    KEY_LIMIT_FILE,
    USER_LIMITS_FILE
)
from handlers import register_handlers, set_bot_instance
from utils import read_file, append_to_file, write_file
from logging.handlers import TimedRotatingFileHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = 'logs'
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

logger = logging.getLogger()
logger.setLevel(logging.INFO)

handler = TimedRotatingFileHandler(
    filename=os.path.join(log_dir, 'bot.log'),
    when='midnight',
    interval=1,
    backupCount=7,
    encoding='utf-8',
    delay=False,
    utc=False
)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
set_bot_instance(bot)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
register_handlers(dp)

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def initialize_project():
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    required_dirs = [DATA_DIR, CONFIGS_DIR, USERS_DIR, log_dir]
    for directory in required_dirs:
        if not os.path.exists(directory):
            os.makedirs(directory)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

    data_files = {
        'authorized_users.txt': [],
        'banned_users.txt': [],
        'keys_issued.txt': [],
        'keys_log.txt': [],
        'support_requests.txt': [],
        'exceptions.txt': [],
        'key_limit.txt': ['10'],  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'user_limits.txt': [],
        'user_keys_count.txt': []
    }

    for filename, default_content in data_files.items():
        file_path = os.path.join(USERS_DIR, filename)
        if not os.path.exists(file_path):
            async with aiofiles.open(file_path, 'w', encoding='utf-8') as f:
                if default_content:
                    for line in default_content:
                        await f.write(f"{line}\n")
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path} —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á–µ–≤–æ–π –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    if not os.path.exists(KEY_LIMIT_FILE):
        await write_file(KEY_LIMIT_FILE, ['10'])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –∫–ª—é—á–µ–π: {KEY_LIMIT_FILE}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not os.path.exists(USER_LIMITS_FILE):
        await write_file(USER_LIMITS_FILE, [])
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {USER_LIMITS_FILE}")

# –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def on_startup(dispatcher):
    await initialize_project()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    
    